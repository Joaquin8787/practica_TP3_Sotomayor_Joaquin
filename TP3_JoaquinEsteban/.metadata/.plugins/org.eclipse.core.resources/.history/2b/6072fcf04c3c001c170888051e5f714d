#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromText(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retorno = 1;
	int cantidad;
	char buffer[4][20];

	Employee* nuevoEmpleado;

	if(pFile != NULL &&  pArrayListEmployee != NULL){
		// Lectura fantasma
		    fscanf(pFile, "%[^,],%[^,],%[^,],%[^\n]\n", buffer[0], buffer[1], buffer[2], buffer[3]);
		    //DEBUG
		    printf("%s   %s    %s    %s\n\n", buffer[0], buffer[1], buffer[2], buffer[3]);

		    while(!feof(pFile)) //RECORRO HASTA QUE LEA CADA LINEA DEL ARCHIVO
		        {
		            cantidad = fscanf(pFile, "%[^,],%[^,],%[^,],%[^\n]\n", buffer[0], buffer[1], buffer[2], buffer[3]);
		            if( cantidad < 4){ //VERIFICO QUE HAYA PODIDO LEVANTAR CADA CAMPO
		                break;
		              }

		            nuevoEmpleado = employee_newParametros(buffer[0], buffer[1],buffer[2],buffer[3]); //CONSTRUYO UN NUEVO EMPLEADO
		            ll_add(pArrayListEmployee, nuevoEmpleado);

		            retorno = 0;
		        }
	}
    return retorno;
}

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromBinary(FILE* pFile , LinkedList* pArrayListEmployee)
{

    return 1;
}
